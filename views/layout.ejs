<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
	<head profile="http://gmpg.org/xfn/11">
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!-- Viewport mobile tag for sensible mobile support -->
    <!-- <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> -->
		<meta name="et_featured_auto_speed" content="7000" />
		<meta name="et_disable_toptier" content="1" />
		<meta name="et_featured_slider_auto" content="0" />
		<meta name="et_featured_slider_pause" content="0" />
		<meta name='robots' content='noindex,follow' />
		<title><%=typeof title == 'undefined' ? 'SliceNDice' : title%></title>
		<link rel='dns-prefetch' href='//fonts.googleapis.com' />
		<link rel='dns-prefetch' href='//s.w.org' />
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
		<link rel="stylesheet" href="/css/style.css" type="text/css" media="screen" />
		<!--[if lt IE 7]>
			<link rel="stylesheet" type="text/css" href="/css/ie6style.css" />
			<script type="text/javascript" src="/js/DD_belatedPNG_0.0.8a-min.js"></script>
			<script type="text/javascript">
				DD_belatedPNG.fix('img#logo, span.overlay, a.zoom-icon, a.more-icon, #menu, #menu-right, #menu-content, ul#top-menu ul, #featured a#left-arrow, #featured a#right-arrow, #top-bottom, #top .container, #recent-projects, #recent-projects-right, #recent-projects-content, .project-overlay, span#down-arrow, #footer-content, #footer-top, .footer-widget ul li, span.post-overlay, #content-area, .avatar-overlay, .comment-arrow');
			</script>
		<![endif]-->
		<!--[if IE 7]>
			<link rel="stylesheet" type="text/css" href="/css/ie7style.css" />
		<![endif]-->
		<!--[if IE 8]>
			<link rel="stylesheet" type="text/css" href="/css/ie8style.css" />
		<![endif]-->
		<link rel='stylesheet' href='/css/shortcodes.css' type='text/css' media='all' />
		<link rel='stylesheet' href='/css/magnific_popup.css' type='text/css' media='screen' />
		<link rel='stylesheet' href='/css/page_templates.css' type='text/css' media='screen' />
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
	</head>
  <body class="home blog chrome et_includes_sidebar">
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/emoji.js"></script>
    <script src="/js/dependencies/jquery.js"></script>
    <script src="/js/dependencies/moment.js"></script>
    <script src="/js/custom.js"></script>
    <script src="/js/DD_belatedPNG_0.0.8a-min.js"></script>
    <script src="/js/et-ptemplates-frontend.js"></script>
    <script src="/js/jquery-migrate.min.js"></script>
    <script src="/js/jquery.easing-1.3.pack.js"></script>
    <script src="/js/jquery.easing.1.3.js"></script>
    <script src="/js/jquery.magnific-popup.js"></script>
    <script src="/js/superfish.js"></script>
    <script src="/js/wp-emoji-release.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
